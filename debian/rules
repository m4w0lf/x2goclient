#!/usr/bin/make -f

export CPPFLAGS:=$(shell dpkg-buildflags --get CPPFLAGS)
export CFLAGS:=$(shell dpkg-buildflags --get CFLAGS)
export CXXFLAGS:=$(shell dpkg-buildflags --get CXXFLAGS)
export LDFLAGS:=$(shell dpkg-buildflags --get LDFLAGS)

RELEASE_VER := 0
RELEASE_VER_MAJOR := 0
RELEASE_VER_MINOR := 0
VENDOR_DEBIAN :=
VENDOR_UBUNTU :=

QT_VERSION := 4

# Setting these disables autodetection.
FORCE_VENDOR :=
FORCE_RELEASE_VER :=

ifneq ($(FORCE_VENDOR),)
  ifneq ($(FORCE_RELEASE_VER),)
    VENDOR_DEBIAN := $(shell if [ 'debian' = '$(FORCE_VENDOR)' ] || [ '$(FORCE_VENDOR)' = 'raspbian' ]; then echo 'yes'; fi)
    VENDOR_UBUNTU := $(shell if [ 'ubuntu' = '$(FORCE_VENDOR)' ]; then echo 'yes'; fi)
    RELEASE_VER := $(FORCE_RELEASE_VER)

    ifeq ($(VENDOR_UBUNTU),yes)
      RELEASE_VER_MAJOR := $(shell printf '%s\n' '$(RELEASE_VER)' | /usr/bin/cut -d '.' -f '1')
      RELEASE_VER_MINOR := $(shell printf '%s\n' '$(RELEASE_VER)' | /usr/bin/cut -d '.' -f '2')
    endif
  else
    $(error FORCE_VENDOR passed, but FORCE_RELEASEVER empty.)
  endif
else
  VENDOR_DEBIAN := $(shell { dpkg-vendor --is 'Debian' && echo 'yes'; } || { dpkg-vendor --is 'Raspbian' && echo 'yes'; })

  ifeq ($(VENDOR_DEBIAN),yes)
    RELEASE_VER := $(shell /usr/bin/lsb_release -r | /bin/sed -e 's/[	 ]*//g' | /usr/bin/cut -d ':' -f '2' | /usr/bin/cut -d '.' -f '1')
    # Let's fake testing's and unstable's "release version"...
    ifeq ($(RELEASE_VER),testing)
      RELEASE_VER := 999
    endif
    ifeq ($(RELEASE_VER),unstable)
      RELEASE_VER := 9999
    endif
  else
    VENDOR_UBUNTU := $(shell dpkg-vendor --is 'Ubuntu' && echo 'yes')

    ifeq ($(VENDOR_UBUNTU),yes)
      RELEASE_VER_MAJOR := $(shell /usr/bin/lsb_release -r | /bin/sed -e 's/[	 ]*//g' | /usr/bin/cut -d ':' -f '2' | /usr/bin/cut -d '.' -f '1')
      RELEASE_VER_MINOR := $(shell /usr/bin/lsb_release -r | /bin/sed -e 's/[	 ]*//g' | /usr/bin/cut -d ':' -f '2' | /usr/bin/cut -d '.' -f '2')
    endif
  endif
endif

# Actual version switch.
ifeq ($(VENDOR_DEBIAN),yes)
  ifeq ($(shell /bin/bash -c '(( $(RELEASE_VER) >= 11 )) && echo '"'"'yes'"'"),yes)
    QT_VERSION = 5
  endif
else
  ifeq ($(VENDOR_UBUNTU),yes)
    # Example of how to use major and minor as a selector, we currently won't need
    # this as the transition happened on a major version.
    #ifeq ($(shell /bin/bash -c '(( $(RELEASE_VER_MAJOR) == 20 )) && echo '"'"'yes'"'"),yes)
      #ifeq ($(shell /bin/bash -c '(( $(RELEASE_VER_MINOR) >= 4 )) && echo '"'"'yes'"'"),yes)
        #QT_VERSION = 5
      #endif
    #else
    ifeq ($(shell /bin/bash -c '(( $(RELEASE_VER_MAJOR) >= 20 )) && echo '"'"'yes'"'"),yes)
      QT_VERSION = 5
    endif
  endif
endif

# The preprocessing magic is highly inspired by the firefox package.
IN_FILES := $(wildcard debian/*.in)
preprocessed_filename = $(1:.in=)
define preprocess
$(call preprocessed_filename,$(1)): $(1)
PREPROCESSED_FILES += $(call preprocessed_filename,$(1))
endef
$(foreach f,$(IN_FILES),$(eval $(call preprocess, $(f))))

$(PREPROCESSED_FILES): VARS = QT_VERSION

$(PREPROCESSED_FILES):
	debian/preprocess.sh $< $(foreach var,$(VARS),'$(var)=$($(var))' )

%:
	dh $@ --parallel

override_dh_auto_configure:
	cp debian/changelog res/txt/changelog
	if [ -f ChangeLog.gitlog ]; then cp ChangeLog.gitlog res/txt/git-info; fi
	dh_auto_configure

override_dh_auto_clean:
	# Try to regenerate debian/control if necessary, but don't force it.
	# sbuild will run the clean operation non-chrooted before building the
	# source package, meaning that we're not running in the target system,
	# so forcefully regenerating it will lead to wrong results.
	debian/rules 'debian/control'
	dh_auto_clean
	rm -f res/txt/changelog

override_dh_strip:
	dh_strip -p x2goclient --dbg-package=x2goclient-dbg
